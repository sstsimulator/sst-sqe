#   Need a prolog
pushd $SST_TEST_ROOT/testSuites
   if [ $? != 0 ] ; then
      echo "Can't find the test Suites"
      exit 1
   fi

for Suite in  testSuite_Ariel.sh testSuite_EmberSweep.sh testSuite_cacheTracer.sh testSuite_cassini_prefetch.sh testSuite_chdlComponent.sh testSuite_check_maxrss.sh testSuite_embernightly.sh testSuite_hybridsim.sh testSuite_memHierarchy_sdl.sh testSuite_memHSieve.sh testSuite_merlin.sh testSuite_miranda.sh testSuite_partitioner.sh testSuite_prospero.sh testSuite_qsimComponent.sh testSuite_scheduler_DetailedNetwork.sh testSuite_scheduler.sh testSuite_simpleClockerComponent.sh testSuite_simpleComponent.sh testSuite_simpleDistribComponent.sh testSuite_simpleLookupTableComponent.sh testSuite_simpleMessageGeneratorComponent.sh testSuite_simpleRNGComponent.sh testSuite_simpleStatisticsComponent.sh testSuite_SiriusZodiacTrace.sh testSuite_VaultSim.sh testSuite_zoltan.sh

do
   if [[ ${SST_ONE_VALGRIND:+isSet} == isSet ]]
   then
       SUITE=${SST_ONE_VALGRIND}
       if [[ $Suite == *${SUITE}* ]] ; then
           echo Doing $Suite
       else
           continue
       fi
   fi

#		Reset the Suite
   git checkout -- $Suite

#		-- Check the Valgrind output --
#		Look for the "kludge" for the openmpi Valgrind issue
   echo $MPIHOME | grep jpvandy
   if [ $? == 0 ] ; then 
      numberAllowed=0
   else
      numberAllowed=1
   fi		
#		Invoke the checking subroutine
   cat > _tmp_in << .eol.
   checkValgrindOutput \$VGout $numberAllowed 
.eol.
   
   sed -i'.w' '/RetVal=$?/ r _tmp_in' $Suite

#		Use the unwrapped sst executable, sstsim.x
   sed -i'.z' /sut=/a' \
   sut=$SST_INSTALL_BIN/../libexec/sstsim.x
      ' $Suite

      if [ $Suite != "testSuite_EmberSweep.sh" ] ; then
##           This is the code for all Suites except EmberSweep

#		Check if there is an outFile defined
      grep outFile= $Suite > /dev/null
      if [ $? != 0 ] ; then
         echo "$Suite -  Warning:  there is no outFile!"
         echo "      Valgrind output, VGout will not be defined"
      fi
#		Define a unique output file for Valgrind 
      sed -i'.x' /outFile=/a' \
      VGout="${SST_TEST_OUTPUTS}/${testDataFileBase}.VGout" \
      rm -f $VGout
         ' $Suite
#		Remove parenthesis if needed
#
      sed '/sut.*sutArgs/s/(${sut}/${sut}/' $Suite > __half-way
      diff $Suite __half-way 
      if [ $? != 0 ] ; then
         sed '/sut.*sutArgs/s/)//' __half-way > $Suite
         diff __half-way $Suite
      fi
      rm __half-way


#		Add Valgrind, with parameters to sst execution line
      sed -i'.z' '/sut.*sutArgs/s/${sut} /valgrind --track-origins=yes --log-file=$VGout ${sut} /' $Suite

   else

##           This is the code for the EmberSweep Suite
      sed -i'.x' '/PARAMS=""/ a \
      VGout=""
      ' $Suite

      sed -i'.y' '/testDataFileBase=/i \
      VGout="${SST_TEST_OUTPUTS}/testES_${TEST_INDEX}.VGout"
      ' $Suite

      sed -i'.z' -e '/MULTI_THREAD/,/fi/ s/^/#/' $Suite

      DEST=${SST_ROOT}/sst-elements/src/sst/elements/ember/test
      sed '/ .sst/s/ "sst/ "valgrind --track-origins=yes --log-file=$VGout $sut/' ${SST_TEST_INPUTS}/EmberSweepGenerator.py > $DEST/EmberSweepGenerator.py
      chmod +x $DEST/EmberSweepGenerator.py 
   fi  


done
#
#		Jack the time limit way up
echo "WARNING:  Time Limit Enforcer may not work!"
ls -l ../utilities/timeLimitEnforcer.sh   
wc    ../utilities/timeLimitEnforcer.sh   
		
   sed -i'.x' /CASE=/a' \
    SST_TEST_ONE_TEST_TIMEOUT=5000         # Over an hour
   ' ../utilities/timeLimitEnforcer.sh   

