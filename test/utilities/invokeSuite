# /bin/bash
#	This script is a wrapper for an individual test Suite to allow 
#	specifing number of threads, number of ranks and specific test
#	to run.
#
#	It has five parameters, space separated.  The are positional, so 
#	if a later parameter is to used, earlier must be supplied.
#	    Suite name - without the "testSuite_" or the ".sh"
#	    Number of threads to use. [zero (0) or none default to 1]
#	    Number of ranks to use [zero (0) or none default to 1]
#	    The tests to run, colon separated.  Default is all.
#	         (A unique portion of the name is all that required.)
#	         "all" may be specified if the fifth parameter is needed.
#	    The optional fifth parameter is added text (char).
#	Jenkins does not report multiple runs of a Suite of the same 
#	name, so the numbers are append to the name. If it is desired
#	to run a configuration more than once, the fifth parameter
#	can be used.        
#
#       WARNING:  Currently this specification MAY override an 
#       environment variable specification.
#       It is assume that SST_ROOT points to the directory where test of
#       the SQE tree resides.   
#
    . $SST_ROOT/test/include/testDefinitions.sh

    SST_TEST_SUITES=$SST_ROOT/test/testSuites
    origSuite=${SST_TEST_SUITES}/testSuite_${1}.sh
    N_Threads=$2
    N_Ranks=$3
    SelectTests=$4

    if [[ ${2:+isSet} != isSet ]] ; then
        N_Threads=1 ; N_Ranks=1
    elif [[ ${3:+isSet} != isSet ]] ; then
        N_Ranks=1
    elif [ "all" == "${4}" ] ; then
        SelectTests=""
    fi

    if [ 0 == $N_Threads ] ; then
        N_Threads=1
    fi
    if [ 0 == $N_Ranks ] ; then
        N_Ranks=1
    fi

    echo $origSuite, $N_Threads, $N_Ranks, $SelectTests
    ls $origSuite >/dev/null 2>1
    if [ $? -ne 0 ] ; then
       echo "invalid Suite name:  $origSuite"
       exit
    fi

    export SST_MULTI_THREAD_COUNT=$N_Threads
    export SST_MULTI_RANK_COUNT=$N_Ranks
     

   tmpSuite=$SST_TEST_SUITES/tmptestSuite_${1}-${2}-${3}_${5}.temp
   ##origSuite=$theSuite
   ## rm $tmpSuite
   cp $origSuite $tmpSuite
   theSuite=$tmpSuite
   pushd $SST_TEST_SUITES

##  At this point theSuite points to the original testSuite
##       and tmpSuite is the name of the empty file to be developed
#
#
##    Insert special code for Multi Thread
#        If (and only if this is multi-thread, this section will
#        include the multi thread code and write it to tmpSuite.
#
   if [[ ${N_Threads:+isSet} == isSet ]] && [ $N_Threads -gt 1 ] ; then
       echo ' ' ; echo "   Running Multi Thread:  nt = $N_Threads "
       sed '/sut}.*${sutA/s/sut}'/"sut} -n $N_Threads /" $origSuite > $tmpSuite
       theSuite=$tmpSuite
       grep 'sut.*sutA' $theSuite
       chmod +x $theSuite
       export SST_MULTI_THREAD_COUNT=$N_Threads
       export SST_MULTI_CORE=1
   fi

##   At this point if and only if multi thread, tmpSuite has content
#        and theSuite points to tmpSuite.
#
##    Insert special code for Multi Rank
#        If Multi Rank is requested this section will do as needed to 
#        get the correct code in tmpSuite and make theSuite point to it.
#
   if [[ ${N_Ranks:+isSet} == isSet ]] && [ $N_Ranks -gt 1 ] ; then
       echo ' ' ; echo "   Running Multi Rank:  nr = $N_Ranks "
       export SST_MULTI_RANK_COUNT=$N_Ranks
       export SST_MULTI_CORE=1

       set_map-by_parameter        ## generate NUMA_PARAM

       grep 'sut}.*sutArgs' $theSuite | grep mpirun 
       if [ $? == 0 ] ; then
          echo "Do not change $origSuite, it already has mpirun"
       else
          if [ -s $tmpSuite ] ; then                  #  -s means is NOT zero size
             sed -i.x '/sut}.*sutArgs/s/..sut/mpirun -np '"${SST_MULTI_RANK_COUNT} $NUMA_PARAM"' ${sut/' $tmpSuite
          else
             sed '/sut}.*sutArgs/s/..sut/mpirun -np '"${SST_MULTI_RANK_COUNT} $NUMA_PARAM"' ${sut/' $origSuite > $tmpSuite
             theSuite=$tmpSuite
             chmod +x $theSuite
          fi
       fi
   fi

## At this point if anything is multi, tmpSuite contains the Suite to use and
#    theSuite points to it.
#       If nothing is multi the file tmpSuite is empty and theSuite still points to 
#       the orginal testSuite.
#             
##   This section select tests to run from the Suite and it will populate tmpSuite,
#       if needed  . . .
#       ---  I don't know about this section ?????  it's COB.
   if [ ! -z $SelectTests ] ; then
       if [ ! -s $tmpSuite ] ; then                  #  -s means is NOT zero size
           cp $theSuite $tmpSuite
       fi
       sed -i'.x' -e s/^test_/xxtest_/ $tmpSuite 

       for _TEST in `echo $SelectTests | sed 's/:/ /g'`
       do
           sed -i'.x' -e /xxtest.*${_TEST}.*/s/^xxtest/test/ $tmpSuite
           theSuite=$tmpSuite
           chmod +x $theSuite
       done

        grep ^test_ $theSuite
        if [ $? != 0 ] ; then
            echo ' ' ; echo " No runnable test";  echo " did not find $SelectTests among"
            grep ^test_ $SST_TEST_SUITES/$theSuite | awk -F\( '{print $1}'
            exit
        fi
   fi
     
   popd
     
   $theSuite
